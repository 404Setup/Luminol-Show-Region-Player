From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <novau233@163.com>
Date: Wed, 7 Feb 2024 04:39:56 +0000
Subject: [PATCH] Add a simple tpsbar


diff --git a/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java b/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ac8f0e3bf130ba6dfd7202e2f480352218154cdc
--- /dev/null
+++ b/src/main/java/me/earthme/luminol/commands/TpsBarCommand.java
@@ -0,0 +1,40 @@
+package me.earthme.luminol.commands;
+
+import me.earthme.luminol.functions.GlobalServerTpsBar;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+public class TpsBarCommand extends Command {
+    public TpsBarCommand(@NotNull String name) {
+        super(name);
+        this.setPermission("luminol.commands.tpsbar");
+        this.setDescription("Show the tps and mspt through a bossbar");
+        this.setUsage("/tpsbar");
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        if (!testPermission(sender)){
+            return true;
+        }
+
+        if (!(sender instanceof Player player)){
+            sender.sendMessage(ChatColor.RED+"Only player can use this command!");
+            return true;
+        }
+
+        if (GlobalServerTpsBar.isPlayerVisible(player)) {
+            player.sendMessage(ChatColor.BLUE + "Disabled tps bar");
+            GlobalServerTpsBar.setVisibilityForPlayer(player,false);
+            return true;
+        }
+
+        player.sendMessage(ChatColor.GREEN + "Enabled tps bar");
+        GlobalServerTpsBar.setVisibilityForPlayer(player,true);
+
+        return true;
+    }
+}
diff --git a/src/main/java/me/earthme/luminol/config/modules/misc/TpsBarConfig.java b/src/main/java/me/earthme/luminol/config/modules/misc/TpsBarConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..0179a5c8006d2dae3c61303f42f59a685efbd2c4
--- /dev/null
+++ b/src/main/java/me/earthme/luminol/config/modules/misc/TpsBarConfig.java
@@ -0,0 +1,44 @@
+package me.earthme.luminol.config.modules.misc;
+
+import com.electronwill.nightconfig.core.file.CommentedFileConfig;
+import me.earthme.luminol.commands.TpsBarCommand;
+import me.earthme.luminol.config.ConfigInfo;
+import me.earthme.luminol.config.EnumConfigCategory;
+import me.earthme.luminol.config.IConfigModule;
+import me.earthme.luminol.config.LuminolConfig;
+import me.earthme.luminol.functions.GlobalServerTpsBar;
+import org.bukkit.Bukkit;
+
+import java.util.List;
+
+public class TpsBarConfig implements IConfigModule {
+    @ConfigInfo(baseName = "enabled")
+    public static boolean tpsbarEnabled = false;
+    @ConfigInfo(baseName = "format")
+    public static String tpsBarFormat = "<gray>TPS<yellow>:</yellow> <tps> MSPT<yellow>:</yellow> <mspt> Ping<yellow>:</yellow> <ping>ms";
+    @ConfigInfo(baseName = "tps_color_list")
+    public static List<String> tpsColors = List.of("GREEN","YELLOW","RED","PURPLE");
+    @ConfigInfo(baseName = "ping_color_list")
+    public static List<String> pingColors = List.of("GREEN","YELLOW","RED","PURPLE");
+
+    @Override
+    public EnumConfigCategory getCategory() {
+        return EnumConfigCategory.MISC;
+    }
+
+    @Override
+    public String getBaseName() {
+        return "tpsbar";
+    }
+
+    @Override
+    public void onLoaded(CommentedFileConfig configInstance){
+        if (tpsbarEnabled){
+            GlobalServerTpsBar.init();
+
+            if (LuminolConfig.alreadyInited){
+                Bukkit.getCommandMap().register("tpsbar","luminol",new TpsBarCommand("tpsbar"));
+            }
+        }
+    }
+}
diff --git a/src/main/java/me/earthme/luminol/functions/GlobalServerTpsBar.java b/src/main/java/me/earthme/luminol/functions/GlobalServerTpsBar.java
new file mode 100644
index 0000000000000000000000000000000000000000..a346af48f5b57ecac2484e799c8bbe525a9c0c05
--- /dev/null
+++ b/src/main/java/me/earthme/luminol/functions/GlobalServerTpsBar.java
@@ -0,0 +1,210 @@
+package me.earthme.luminol.functions;
+
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import io.papermc.paper.threadedregions.TickData;
+import io.papermc.paper.threadedregions.TickRegions;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import me.earthme.luminol.config.modules.misc.TpsBarConfig;
+import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.*;
+import java.util.concurrent.TimeUnit;
+
+public class GlobalServerTpsBar {
+    protected static final MinecraftInternalPlugin NULL_PLUGIN = new MinecraftInternalPlugin();
+    protected static final Map<UUID,BossBar> uuid2Bossbars = new HashMap<>();
+    protected static volatile ScheduledTask tpsbarTask = null;
+    private static final Logger logger = LogManager.getLogger();
+
+    public static void init(){
+        if (tpsbarTask != null && !tpsbarTask.isCancelled()){
+            tpsbarTask.cancel();
+        }
+
+        Bukkit.getAsyncScheduler().runAtFixedRate(NULL_PLUGIN,c -> {
+            tpsbarTask = c;
+            try {
+                update();
+            }catch (Exception e){
+                logger.error(e);
+            }
+        },1,1, TimeUnit.SECONDS);
+    }
+
+    public static void cancelBarUpdateTask(){
+        if (tpsbarTask == null || tpsbarTask.isCancelled()){
+            return;
+        }
+
+        tpsbarTask.cancel();
+    }
+
+    public static boolean isPlayerVisible(Player player){
+        return ((CraftPlayer) player).getHandle().isTpsBarVisible;
+    }
+
+    public static void setVisibilityForPlayer(Player target,boolean canSee){
+        ((CraftPlayer) target).getHandle().isTpsBarVisible = canSee;
+    }
+
+    private static void update(){
+        updateBarValues();
+        cleanUpPlayers();
+    }
+
+    private static void cleanUpPlayers(){
+        final List<UUID> toRemove = new ArrayList<>();
+
+        for (Map.Entry<UUID,BossBar> bossBarEntry : uuid2Bossbars.entrySet()){
+            final UUID uuid = bossBarEntry.getKey();
+            boolean shouldRemove = true;
+
+            final Player target = Bukkit.getPlayer(uuid);
+            if (target != null){
+                shouldRemove = !isPlayerVisible(target);
+            }
+
+            if (shouldRemove){
+                toRemove.add(uuid);
+            }
+        }
+
+        for (UUID uuid : toRemove){
+           final BossBar removed =  uuid2Bossbars.remove(uuid);
+           if (removed != null){
+               final Player targetPlayer = Bukkit.getPlayer(uuid);
+               if (targetPlayer != null){
+                   targetPlayer.hideBossBar(removed);
+               }
+           }
+        }
+    }
+
+    private static void updateBarValues(){
+        for (Player apiPlayer : Bukkit.getOnlinePlayers()){
+            final ServerPlayer nmsPlayer = ((CraftPlayer) apiPlayer).getHandle();
+            final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region = ((ServerLevel) nmsPlayer.level()).regioniser.getRegionAtUnsynchronised(nmsPlayer.sectionX,nmsPlayer.sectionZ);
+
+            if (region == null){
+                continue;
+            }
+
+            final TickData.TickReportData reportData = region.getData().getRegionSchedulingHandle().getTickReport5s(System.nanoTime());
+
+            BossBar targetBossbar = uuid2Bossbars.get(nmsPlayer.getUUID());
+
+            if (targetBossbar == null && isPlayerVisible(apiPlayer)){
+                targetBossbar = BossBar.bossBar(Component.text(""),0.0F, BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(3)), BossBar.Overlay.NOTCHED_20);
+                uuid2Bossbars.put(nmsPlayer.getUUID(),targetBossbar);
+                apiPlayer.showBossBar(targetBossbar);
+            }
+
+            if (reportData != null && targetBossbar != null){
+                final TickData.SegmentData tpsData = reportData.tpsData().segmentAll();
+                final double mspt = reportData.timePerTickData().segmentAll().average() / 1.0E6;
+                updateTpsBar(tpsData.average(),mspt,targetBossbar,apiPlayer);
+            }
+        }
+    }
+
+    private static void updateTpsBar(double tps, double mspt, @NotNull BossBar bar, @NotNull Player player){
+        bar.name(MiniMessage.miniMessage().deserialize(
+                TpsBarConfig.tpsBarFormat,
+                Placeholder.component("tps",getTpsComponent(tps)),
+                Placeholder.component("mspt",getMsptComponent(mspt)),
+                Placeholder.component("ping",getPingComponent(player.getPing()))
+        ));
+        bar.color(barColorFromTps(tps));
+        bar.progress((float) Math.min((float)1,Math.max(mspt / 50,0)));
+    }
+
+    private static @NotNull Component getPingComponent(int ping){
+        final BossBar.Color colorBukkit = barColorFromPing(ping);
+        final String colorString = colorBukkit.name();
+
+        final String content = "<%s><text></%s>";
+        final String replaced = String.format(content,colorString,colorString);
+
+        return MiniMessage.miniMessage().deserialize(replaced,Placeholder.parsed("text", String.valueOf(ping)));
+    }
+
+    private static BossBar.Color barColorFromPing(int ping){
+        if (ping == -1){
+            return BossBar.Color.valueOf(TpsBarConfig.pingColors.get(3));
+        }
+
+        if (ping <= 80){
+            return BossBar.Color.valueOf(TpsBarConfig.pingColors.get(0));
+        }
+
+        if (ping <= 160){
+            return BossBar.Color.valueOf(TpsBarConfig.pingColors.get(1));
+        }
+
+        return BossBar.Color.valueOf(TpsBarConfig.pingColors.get(2));
+    }
+
+    private static @NotNull Component getMsptComponent(double mspt){
+        final BossBar.Color colorBukkit = barColorFromMspt(mspt);
+        final String colorString = colorBukkit.name();
+
+        final String content = "<%s><text></%s>";
+        final String replaced = String.format(content,colorString,colorString);
+
+        return MiniMessage.miniMessage().deserialize(replaced,Placeholder.parsed("text", String.format("%.2f", mspt)));
+    }
+
+    private static BossBar.Color barColorFromMspt(double mspt){
+        if (mspt == -1){
+            return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(3));
+        }
+
+        if (mspt <= 25){
+            return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(0));
+        }
+
+        if (mspt <= 50){
+            return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(1));
+        }
+
+        return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(2));
+    }
+
+    private static @NotNull Component getTpsComponent(double tps){
+        final BossBar.Color colorBukkit = barColorFromTps(tps);
+        final String colorString = colorBukkit.name();
+
+        final String content = "<%s><text></%s>";
+        final String replaced = String.format(content,colorString,colorString);
+
+        return MiniMessage.miniMessage().deserialize(replaced,Placeholder.parsed("text", String.format("%.2f", tps)));
+    }
+
+    private static BossBar.Color barColorFromTps(double tps){
+        if (tps == -1){
+            return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(3));
+        }
+
+        if (tps >= 18){
+            return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(0));
+        }
+
+        if (tps >= 15){
+            return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(1));
+        }
+
+        return BossBar.Color.valueOf(TpsBarConfig.tpsColors.get(2));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 4744ace98d1741db80ac2aea198f332d95c0ba33..550fb11c64e3adb35bb7f78c53f0b5ae5ce9ff58 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -832,6 +832,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     @Override
     public void stopServer() {
+        me.earthme.luminol.functions.GlobalServerTpsBar.cancelBarUpdateTask(); //Luminol - Tpsbar
         super.stopServer();
         //Util.shutdownExecutors(); // Paper - moved into super
         SkullBlockEntity.clear();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index cbc89b8898f9243776af88c2b04ad3c2e4e23fb6..318cb1e98a3d73b7893f07c9f0db3adab801b67e 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -285,6 +285,7 @@ public class ServerPlayer extends Player {
     // Paper start - replace player chunk loader
     private final java.util.concurrent.atomic.AtomicReference<io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances> viewDistances = new java.util.concurrent.atomic.AtomicReference<>(new io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances(-1, -1, -1));
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
+    public volatile boolean isTpsBarVisible = false; //Luminol - Tps bar
 
     public io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.ViewDistances getViewDistances() {
         return this.viewDistances.get();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 8fc071a6249193af5e1795cc19f50996ea22d96f..830616f7a3d1c3e25133229a74e08cbb9d412179 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2287,6 +2287,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 handle.expToDrop = data.getInt("expToDrop");
                 handle.keepLevel = data.getBoolean("keepLevel");
             }
+            //Luminol start - Tpsbar
+            getHandle().isTpsBarVisible = data.getBoolean("tpsbarVisible");
+            //Luminol end
         }
     }
 
@@ -2308,6 +2311,9 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.putLong("lastPlayed", System.currentTimeMillis());
         data.putString("lastKnownName", handle.getScoreboardName());
 
+        //Luminol start - Tpsbar
+        data.putBoolean("tpsbarVisible",handle.isTpsBarVisible);
+        //Luminol end
         // Paper start - persist for use in offline save data
         if (!nbttagcompound.contains("Paper")) {
             nbttagcompound.put("Paper", new CompoundTag());
