From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <novau233@163.com>
Date: Tue, 30 Jan 2024 13:02:45 +0000
Subject: [PATCH] Io_uring channel type support


diff --git a/build.gradle.kts b/build.gradle.kts
index 1bdeb0e9d0c04509d7ed4003f6b79c806dc55eed..c0199b93a69a2d0b99d7c61a1bdb55fc8a9a07de 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -39,6 +39,7 @@ dependencies {
     log4jPlugins.annotationProcessorConfigurationName("org.apache.logging.log4j:log4j-core:2.19.0") // Paper - Needed to generate meta for our Log4j plugins
     runtimeOnly(log4jPlugins.output)
     alsoShade(log4jPlugins.output)
+    implementation("io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final:linux-x86_64") //Luminol - io_uring Libraries
     implementation("io.netty:netty-codec-haproxy:4.1.97.Final") // Paper - Add support for proxy protocol
     // Paper end
     implementation("org.apache.logging.log4j:log4j-iostreams:2.19.0") // Paper - remove exclusion
diff --git a/src/main/java/me/earthme/luminol/LuminolConfig.java b/src/main/java/me/earthme/luminol/LuminolConfig.java
index fa3f0008fc6e026778f75dd44584d3e6e2f77bb8..1d0ba882fe06624a16b5b6fb03cc679a872fb595 100644
--- a/src/main/java/me/earthme/luminol/LuminolConfig.java
+++ b/src/main/java/me/earthme/luminol/LuminolConfig.java
@@ -35,6 +35,7 @@ public class LuminolConfig {
     public static boolean disableUsernameCheck = false;
     public static boolean disableOfflineModeWarning = false;
     public static boolean fixSpectorTeleportFolia = false;
+    public static boolean enableIoUring = false;
 
     public static boolean safeTeleportation = true;
     public static boolean enableSandDuping = false;
@@ -180,6 +181,7 @@ public class LuminolConfig {
         disableUsernameCheck = get("misc.disable_username_check",disableUsernameCheck,"Disable username check that can accept usernames with other characters(such as Chinese).Not recommended to use");
         fixSpectorTeleportFolia = get("misc.fix_folia_spector_teleport",fixSpectorTeleportFolia);
         disableOfflineModeWarning = get("misc.disable_offline_mode_warning",disableOfflineModeWarning);
+        enableIoUring = get("misc.enable_io_uring_support",enableIoUring);
 
         if (tpsbarEnabled){
             initTpsbar();
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 35bf160d10b56fb84d4cb845b61c1d61337e48ca..092883ed467d8f545e91fdd0740d1d633f52e04b 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -20,9 +20,11 @@ import io.netty.channel.epoll.EpollServerSocketChannel;
 import io.netty.channel.local.LocalAddress;
 import io.netty.channel.local.LocalServerChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
-import io.netty.channel.socket.ServerSocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.incubator.channel.uring.IOUring;
+import io.netty.incubator.channel.uring.IOUringEventLoopGroup;
+import io.netty.incubator.channel.uring.IOUringServerSocketChannel;
 import io.netty.util.HashedWheelTimer;
 import io.netty.util.Timeout;
 import io.netty.util.Timer;
@@ -35,6 +37,8 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import me.earthme.luminol.LuminolConfig;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.network.BandwidthDebugMonitor;
@@ -73,6 +77,10 @@ public class ServerConnectionListener {
     }
     // Paper end
 
+    //Luminol start - io_uring support
+    public static final Supplier<IOUringEventLoopGroup> SERVER_IO_URING_WORKER_GROUP = Suppliers.memoize(() -> new IOUringEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty IO_URING Client IO #%d").setDaemon(true).setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(LOGGER)).build()));
+    //Luminol end
+
     public ServerConnectionListener(MinecraftServer server) {
         this.server = server;
         this.running = true;
@@ -100,7 +108,15 @@ public class ServerConnectionListener {
                 // Paper end - Unix domain socket support
                 eventloopgroup = (EventLoopGroup) ServerConnectionListener.SERVER_EPOLL_EVENT_GROUP.get();
                 ServerConnectionListener.LOGGER.info("Using epoll channel type");
-            } else {
+            }
+            //Luminol start - io_uring support
+            else if (IOUring.isAvailable() && LuminolConfig.enableIoUring){
+                eventloopgroup = SERVER_IO_URING_WORKER_GROUP.get();
+                oclass = IOUringServerSocketChannel.class;
+                ServerConnectionListener.LOGGER.info("Using io_uring channel type");
+            }
+            //Luminol end
+            else {
                 oclass = NioServerSocketChannel.class;
                 eventloopgroup = (EventLoopGroup) ServerConnectionListener.SERVER_EVENT_GROUP.get();
                 ServerConnectionListener.LOGGER.info("Using default channel type");
